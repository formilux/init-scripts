#!/bin/bash

if [ "$1" = "complete" ]; then
  compgen -W "date_to_hw date_from_hw help status start stop restart check list_options" "$2"
  exit 0
fi

. `dirname $0`/functions

option	hostname	standard_option
option	modprobe 	multiple_option
option	sysctl		multiple_option
option	sysset		multiple_option
option	file_max	standard_option
option	rtc		standard_option	"local"		# "local", "utc", "disabled"
option	rtc_mode	standard_option	"direct"	# "direct", "kernel"
option	nv_auto_mount	boolean_option
option	nv_auto_format	boolean_option
option  vt_consoles     standard_option                 # 0..63 or leave empty for auto
option	extra_consoles	multiple_option                 # ttyS0:9600:vt100 tty0 ttyUSB1


function do_help {
    echo "Usage: ${0##*/} <status|start|stop|date_to_hw|date_from_hw|help>"
    echo "List of config.rc options (name, type, default value, current value) :"
    echo
    echo "   - hostname : string  ;                    ; cur=$opt_hostname"
    echo "   - modprobe : mod arg ; eg: usb-ohci       ; cur='${opt_modprobe[@]}'"
    echo "   - sysctl   : var=val ; eg: kernel.sysrq=0 ; cur='${opt_sysctl[@]}'"
    echo "   - sysset   : var=val ;                    ; cur='${opt_sysset[@]}'"
    echo "   - filemax  : integer ;                    ; cur=$opt_filemax"
    echo "   - rtc      : local|utc|disabled ;   local ; cur=$opt_rtc"
    echo "   - rtc_mode : direct|kernel      ;  direct ; cur=$opt_rtc_mode"
    echo "   - nv_auto_mount  : boolean ; default=     ; cur=$opt_nv_auto_mount"
    echo "   - nv_auto_format : boolean ; default=     ; cur=$opt_nv_auto_format"
    echo "   - vt_consoles : integer ; default=        ; cur=$opt_vt_consoles"
    echo "   - extra_consoles : names ; eg: ttyS0:9600 ; cur=${opt_extra_consoles[@]}"
    echo
    exit 1 
}

# gets system date from hardware clock
function do_date_from_hw {
    local rtc_opt=""

    # this is necessary because some PCs (eg: siemens) hang otherwise.
    if [ "$opt_rtc_mode" = "direct" ]; then
	rtc_opt="$rtc_opt --directisa"
    fi

    if [ ! -e /proc/driver/rtc -a ! -e /sys/class/rtc ]; then
	echo "Setting system time from the image (no RTC)."
    elif [ "$opt_rtc" = "utc" ]; then
	echo -n "Setting system time from hardware clock (UTC)... "
	hwclock --hctosys --noadjfile --utc $rtc_opt
	echo "Done."
    elif [ "$opt_rtc" = "local" ]; then
	echo -n "Setting system time from hardware clock (Local time)... "
	hwclock --hctosys --noadjfile --localtime $rtc_opt
	echo "Done."
    fi

    # If a /usr/share/factory/version file exists and is newer than
    # the system date, then the system date is wrong (dead battery?).
    # Let's set the system date to the firmware's release date at least.

    # To achieve this, we compare the start-date of a newly spawned process
    # with the firmware date, and use the firmware date if appropriate.

    "${SHELL:-sh}" -c '[ /proc/self/. -ot /usr/share/factory/version ] && date -s "$(date -r /usr/share/factory/version)" >/dev/null'

    return 0
}

# updates inittab with consoles and optionally reload init.
# Since /dev/console may not be assigned a process group owner, we need to find
# which real consoles it corresponds to. If we can't, we'll leave /dev/console
# however since it still works well enough for most use cases.
function update_consoles {
    local consoles=( )
    local ser_consoles=( )
    local line num name path dev spd term
    local touched=0
    local use_vt=0

    if [ -e /proc/consoles ]; then
        # series of: "ttyS0                -W- (EC   a)    4:64"
        while read; do
            set -- $REPLY
            name="$1"
            flags="${REPLY##*(}"; flags="${flags%%)*}"
            dev="${!#}"
            if [ -n "$name" -a -n "$flags" -a -z "${flags##*E*}" ]; then
                consoles[${#consoles[@]}]="$name $dev"
            fi
        done < /proc/consoles
    else
        # if we can't check /proc/consoles, in doubt, enable VTs
        use_vt=1
    fi

    # consoles[@] is of the form "name[:spd[:term]] [major:minor]" for each line
    # Note that we may have multiple entries in one extra_console line.
    for line in "${consoles[@]}" ${opt_extra_consoles[*]}; do
        set -- $line
        name="$1"
        dev="${!#}"
        if [ -z "${name##tty[0-9]*}" ]; then
            # A virtual console is enabled. If opt_vt_console was not
            # configured, we set it to 4.
            use_vt=1
            [ -n "${opt_vt_consoles}" ] || opt_vt_consoles=4
        else
            # OK that's a serial (or other) console. The name might be
            # incorrect though that's rare these days. The device number
            # however, is correct. If /sys/dev/char is available, we'll
            # double-check there.
            if [ -n "$dev" -a -d "/sys/dev/char/$dev/." ]; then
                path=$(readlink "/sys/dev/char/$dev")
                path="${path##*tty/}"
                [ -z "$path" ] || name="$path"
            fi

            path="/dev/${name%%:*}"
            if [ ! -e "${path}" ]; then
                mkdir -p "${path%/*}"
                mknod c "${path}" "${dev%:*}" "${dev#*:}"
                chown root:tty "${path}"
                chmod 620 "${path}"
            fi

            # get the boot baud rate if none was set, or default to 115200
            if [ -n "${name##*:*}" ]; then
                # try to get baud rate at boot
                baud=$(stty < "$path" 2>/dev/null | grep -o 'speed [0-9]*' | cut -f2 -d' ')
                if [ -n "$baud" ]; then
                    name=${name}:$baud
                else
                    name=${name}:115200
                fi
            fi

            ser_consoles=( "${ser_consoles[@]}" "$name" )
        fi
    done

    # Create virtual consoles if needed. We'll create the configured number
    # of virtual consoles (possibly none) after removing the possibly
    # existing ones from the file (which can even result in no vt if set to
    # zero). Note that tty0 is not a real console, it is the one that
    # remaps to the currently active one and it must not be used by agetty!
    # If nothing indicates VT should be used, we don't even remove possibly
    # existing ones.
    if [ ${use_vt} -ne 0 ] && [ -n "${opt_vt_consoles}" ] && [ "${opt_vt_consoles}" -ge 0 ]; then
        [ "${opt_vt_consoles}" -lt 64 ] || opt_vt_consoles=63
        sed -i -e '/^[^:]*:[^:]*:[^:]*:\([^/]*\/\)*agetty.*\btty[0-9]\+\b/d' /etc/inittab
        num=1
        while [ ${num} -le ${opt_vt_consoles} ]; do
            name="tty${num}"
            path="/dev/${name}"
            if [ ! -e "${path}" ]; then
                mkdir -p "${path%/*}"
                mknod c "${path}" 4 ${num}
                chown root:tty "${path}"
                chmod 620 "${path}"
            fi
            echo "c${num}:1245:respawn:/sbin/agetty 38400 tty$num linux" >> /etc/inittab
            ((num++))
            touched=1
        done
    fi

    # Then we'll add all remaining consoles that were passed by the boot
    # loader. Since they may collide with already configured ones and we have 4
    # chars for the IDs, we'll name them from s100 to s999. Serial terms may
    # optionally have a baud rate after a first colon, and a term type after
    # the second colon.
    num=0
    for name in "${ser_consoles[@]}"; do
        name="${name}:"
        spd="${name#*:}"; name="${name%%:*}"
        term="${spd#*:}"; spd="${spd%%:*}"
        term="${term%%:*}"
        sed -i -e "/^[^:]*:[^:]*:[^:]*:\([^/]*\/\)*agetty.*\b${name##*/}\b/d" /etc/inittab
        # missing entries in /dev for existing devices will not magically
        # appear under us so we must create them. Other ones are not a
        # problem because they might be created later when loading a
        # module or connecting a device (e.g. ttyUSB*).
        if [ ! -e "/dev/${name}" -a -e "/sys/class/tty/${name}/dev" ]; then
            dev=$(cat "/sys/class/tty/${name}/dev")
            path="/dev/${name}"
            mkdir -p "${path%/*}"
            mknod c "${path}" "${dev%:*}" "${dev#*:}"
            chown root:tty "${path}"
            chmod 620 "${path}"
        fi
        # all console devices keep their original speed if not set, and have
        # the term type "linux" by default.
        echo "s$((100+num)):1245:respawn:/sbin/agetty -L ${spd:--s} $name ${term:-linux}" >> /etc/inittab
        ((num++))
        touched=1
    done

    if [ $touched != 0 ]; then
        # suppress an eventual /dev/console entry in inittab
        sed -i -e '/^[^:]*:[^:]*:[^:]*:\([^/]*\/\)*agetty.*\bconsole\b/d' /etc/inittab
        kill -1 1
    elif ! grep -qw "agetty.*\b\(console\|tty\|ttyS\|ttyATH\|ttyAMA\|ttyFIQ\)[0-9]*\b" /etc/inittab; then
        # no console found at all, try to add at least /dev/console
        echo "c0:1245:respawn:/sbin/agetty -L -s console linux" >> /etc/inittab
        kill -1 1
    fi
}

# saves current date to hardware clock
function do_date_to_hw {
    local rtc_opt=""

    # this is necessary because some PCs (eg: siemens) hang otherwise.
    if [ "$opt_rtc_mode" = "direct" ]; then
	rtc_opt="$rtc_opt --directisa"
    fi

    if [ "$opt_rtc" = "utc" ]; then
	echo -n "Saving system time to hardware clock (UTC)... "
	hwclock --systohc --noadjfile --utc $rtc_opt
	echo "Done."
    elif [ "$opt_rtc" = "local" ]; then
	echo -n "Saving system time to hardware clock (Local time)... "
	hwclock --systohc --noadjfile --localtime $rtc_opt
	echo "Done."
    fi
    return 0
}

function do_start {
    local svcname=$1
    local instname=$2
    local arg

    arg=0
    while [ $arg -lt ${#opt_modprobe[*]} ]; do
	if [ "${opt_modprobe[$arg]}" != "#" ]; then
	    if ! modprobe ${opt_modprobe[$arg]}; then
		echo "  ==> start $svcname : modprobe ${opt_modprobe[$arg]} failed. Trying anyway."
	    fi
	fi
	arg=$[$arg+1]
    done

    if [ -n "$opt_file_max" ]; then
	echo $opt_file_max > /proc/sys/fs/file-max
    fi
   
    if [ -n "$opt_hostname" ] ; then
	echo "Setting hostname '$opt_hostname'"
	echo ${opt_hostname%%.*} >/proc/sys/kernel/hostname
	echo ${opt_hostname#*.} >/proc/sys/kernel/domainname
    fi

    if [ -n "$opt_nv_auto_mount" ]; then
        if [ ! -d "/nv/." ] && ! mkdir -p /nv >/dev/null 2>&1; then
            echo "  ==> start $svcname : cannot mount /nv, directory doesn't exist."
        elif [ ! -x "/sbin/mount-nv" ]; then
            echo "  ==> start $svcname : cannot mount /nv, mount-nv isn't installed."
        else
           echo -n "Mounting /nv... "
           /sbin/mount-nv ${opt_nv_auto_format:+--auto-format}
	   echo "Done."
        fi
    fi

    do_date_from_hw

    for arg in "${opt_sysctl[@]}"; do
	local sysctl value
	sysctl="${arg%%=*}"
	sysctl="${sysctl//.//}"
	value="${arg##*=}"
	if [ -e "/proc/sys/$sysctl" ]; then
	    echo "$value" > "/proc/sys/$sysctl"
	else
	    echo "Non-existent sysctl entry : $arg"
	fi
    done

    for arg in "${opt_sysset[@]}"; do
        local sysctl value
        sysset="${arg%%=*}"
        sysset="${sysset//.//}"
        value="${arg##*=}"
        if [ -e "/sys/$sysset" ]; then
            echo "$value" > "/sys/$sysset"
        else
            echo "Non-existent sysset entry : $arg"
        fi
    done

    update_consoles

    return 0
}

function do_status {
    local instname=$2
    echo "System status :"
    echo -n "Hostname : "; hostname
    echo "Modules list :"; lsmod
    return 0
}

function do_stop {
    local svcname=$1
    local instname=$2
    local rtc_opt=""

    arg=${#opt_modprobe[*]}
    while [ $arg -gt 0 ]; do
	arg=$[$arg-1]
	recursive_rmmod ${opt_modprobe[$arg]} >/dev/null 2>&1
    done

    do_date_to_hw
    return 0
}

function do_check {
    local svcname=$1
    local instname=$2
    
    read uptime idletime < /proc/uptime
    echo "$HOSTNAME $svcname.$instname $(date +%s) RUNNING ${uptime%%.*} OK"
}

function do_setconf {
	local pname=$1
	local instance=$2
	local tmpconfig="/tmp/$pname${instance:+.$instance}.conf"

	do_checkconf $1 $2 || return 1

	cat "$tmpconfig" > "$CONFIG"
	rm -f "$tmpconfig"
	return 0
}


# dump sections from config
function do_getconf {
	local pname=$1
	local instance=$2
	local tmpconfig="/tmp/$pname${instance:+.$instance}.conf"

	[ -e "$tmpconfig" ] && cat "$tmpconfig" && return 0
	cat "$CONFIG"
	return 0
}

function fct_post_checkconf {
	local pname=$1
	local instance=$2
	local tmpconfig="$3"

	/sbin/init.d/functions -f "$tmpconfig" --list_sections | (
		ret="0"
		while read svc rest ; do
			IGNORE_OTHERS=1 $INIT_PATH/$svc -f "$tmpconfig" testsec $rest >&2
			if [ "$?" != "0" ] ; then
				ret="1"
				break
			fi
		done
		exit $ret
	)
	[ "$?" != "0" ] && return 1
	return 0
}

load_config
