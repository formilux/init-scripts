#!/bin/bash

# service network [<ifname>]       # interface name -> int_<ifname>=enable
#     replace <old_if_name>
#     ip address <ip/mask> [secondary]  # address for this interface 
#     ip6 address <ipv6/mask> [secondary]  # address for this interface
#     media {auto|full|fdx|100full|100fdx|half|hdx|100half|100hdx>
#     speed {10|100|1000}
#     duplex {half|full}
#     auto {on|off}
#     slave <if> ...
#     modprobe [module [module_options]]
#     lladdr <mac_addr>
#     mtu <mtu>
#     [no] arp
#     [no] multicast
#     shutdown
#     ip route <ip/mask> <-|gw> [ip args...]
#     ip6 route <ipv6/mask> <-|gwv6> [ip args...]
#     vrrp ... (ignored by this script)

# we want ALL instances to stop and restart at once
if [ "$1" = "restart" ]; then
  shift
  $0 stop  "$@"
  $0 start "$@"
  exit $?
elif [ "$1" = "reload" ]; then
  shift
  $0 flush "$@"
  $0 start "$@"
  exit $?
elif [ "$1" = "complete" ]; then
  compgen -W "help status start stop flush reload restart check list_options" "$2"
  exit 0
fi

. `dirname $0`/functions

option	ip		option_ip
option	ip6		option_ip6
option	replace		standard_option
option	usedhcphostname	boolean_option	0
option	dhcptimeout	standard_option	10
option	media		standard_option
option	duplex		standard_option
option	speed		standard_option
option	auto		standard_option
option  master_type	standard_option
option  bonding		option_bonding
option	slave		multiple_option
option	bridge		multiple_option
option	bridge_stp	boolean_option	0
option	sysctl		multiple_option
option	sysset          multiple_option
option	modprobe 	multiple_option
option	lladdr		standard_option
option	mtu		standard_option
option	arp		boolean_option	1
option	multicast	boolean_option	1
option	shutdown	boolean_option
option	vrrp	 	multiple_option
option	load 		multiple_option
option	unload 		multiple_option

SVC_VARS="addr_list addr6_list route_list route6_list arp_list addr_idx addr6_idx route_idx route6_idx arp_idx"


function do_help {
    echo "Usage: ${0##*/} <status|start|stop|flush|reload|help>"
    echo "List of config.rc options (name, type, default value, current value) :"
    echo
    echo "   - ip addr <address>, arp <ip> <mac>|pub, dhcp, route <dest> <-|gw> [<args>]"
    echo "   - ip6 addr <addressv6>, route <destv6> <-|gwv6> [<args>]"
    echo "   - media auto|{full|fdx|100full|100fdx}|{half|hdx|100half|100hdx}"
    echo "   - duplex {half|full} ; speed {10|100|1000} ; auto {on|off}"
    echo "   - slave  <interface*>"
    echo "   - bridge <interface*> ; bridge_stp {on|off}"
    echo "   - sysctl <var>=<val>"
    echo "   - sysset <var>=<val>"
    echo "   - modprobe <module> <arg*>"
    echo "   - load|unload <command> <arg*>"
    echo "   - lladdr <mac_addr> ; replace <old_if_name>"
    echo "   - mtu <mtu> ; arp {on|off} ; multicast {on|off} ; shutdown"
    echo "   - vrrp <id|prio|addr|auth_type|pass|garp>"
    echo
    exit 1 
}

# changes the negociation parameters for interface $1
# usage: set_media <interface> <media>
function set_media {
    case "$2" in
	auto)
	    /sbin/mii-diag -r $1 >/dev/null 2>&1 || \
		/sbin/ethtool -s $1 autoneg on
	    ;;
	full|fdx|100full|100fdx)
	    /sbin/mii-diag -F 100baseTx-FD $1 >/dev/null 2>&1 || \
		/sbin/ethtool -s $1 autoneg off speed 100 duplex full
	    ;;
	half|hdx|100half|100hdx)
	    /sbin/mii-diag -F 100baseTx-HD $1 >/dev/null 2>&1 || \
		/sbin/ethtool -s $1 autoneg off speed 100 duplex half
	    ;;
	*) /sbin/mii-diag -F $opt_media $1 >/dev/null ;;
    esac
}

# changes the negociation parameters for interface $1
# $2=speed(10|100|1000) or "-" if unchanged
# $3=duplex(half|full) or "-" if unchanged
# $4=auto(on|off) or "-" if unchanged
function set_media2 {
    local miistr speed duplex

    speed="$2"; [ "$speed" = "-" ] && speed=""
    duplex="$3"; [ "$duplex" = "-" ] && duplex=""
    if [ "$4" = "on" ] || [ -z "$speed" -a -z "$duplex" ]; then
	/sbin/mii-diag -r $1 >/dev/null 2>&1 || \
	    /sbin/ethtool -s $1 autoneg on
        [ -n "$speed" -o -n "$duplex" ] || return 0
    fi

    [ "$duplex" = "half" ] && miistr="HD" || miistr="FD"
    if [ "$speed" = "10" ]; then
	miistr=10baseT-$miistr
    else
	miistr=${speed:-100}baseTx-$miistr
    fi

    # warning: with ethtool, it's important to set auto, then speed and duplex
    # in this exact order.
    /sbin/mii-diag -F $miistr $1 >/dev/null 2>&1 || \
	/sbin/ethtool -s $1 ${4:+autoneg $4} ${speed:+speed $speed} ${duplex:+duplex $duplex}
}

function fct_begin_section {
    addr_list=( )
    addr6_list=( )
    arp_list=( )
    route_list=( )
    route6_list=( )
    bonding_param=( )
    bonding_value=( )
    addr_idx=0
    addr6_idx=0
    arp_idx=0
    route_idx=0
    route6_idx=0
    bonding_idx=0
}

function option_bonding {
	shift
	bonding_param[$bonding_idx]="$1"
	shift
	bonding_value[$bonding_idx]="$*"
	bonding_idx=$[$bonding_idx+1]
}

# usage: ip <ip> {addr|route} ...
function option_ip {
    shift
    local cmd=$1
    shift
    case "$cmd" in
	addr|address)
	    addr_list[$addr_idx]="$*"
	    addr_idx=$[$addr_idx+1]
	    ;;
	arp|neigh*)
	    arp_list[$arp_idx]="$*"
	    arp_idx=$[$arp_idx+1]
	    ;;
	route)
	    route_list[$route_idx]="$*"
	    route_idx=$[$route_idx+1]
	    ;;
	dhcp)
	    addr_list[$addr_idx]="dhcp"
	    addr_idx=$[$addr_idx+1]
	    ;;
	--disable)
	    ;;
	*)
	    echo "Unknown ip command : $cmd $*"
	    return 1
    esac
}

# usage: ip6 <ipv6> {addr|route} ...
function option_ip6 {
    shift
    local cmd=$1
    shift
    case "$cmd" in
        addr|address)
            addr6_list[$addr6_idx]="$*"
            addr6_idx=$[$addr6_idx+1]
            ;;
        route)
            route6_list[$route6_idx]="$*"
            route6_idx=$[$route6_idx+1]
            ;;
        --disable)
            ;;
        *)
            echo "Unknown ip command : $cmd $*"
            return 1
    esac
}

function do_start {
    local svcname=$1
    local instname=$2
    local repl
    local arg

    if [ -z "$instname" ]; then
	echo "# Starting $svcname ..."
	arg=0
	while [ $arg -lt ${#opt_modprobe[*]} ]; do
	    if [ "${opt_modprobe[$arg]}" != "#" ]; then
		if ! modprobe ${opt_modprobe[$arg]}; then
		    echo "  ==> start $svcname : modprobe ${opt_modprobe[$arg]} failed. Trying anyway."
		fi
	    fi
	    arg=$[$arg+1]
	done

        # The sysctl refers to /proc/sys/net.
        for arg in "${opt_sysctl[@]}"; do
            local sysctl value
            sysctl="${arg%%=*}"
            sysctl="${sysctl//.//}"
            value="${arg##*=}"
            if [ -e "/proc/sys/net/$sysctl" ]; then
                echo "$value" > "/proc/sys/net/$sysctl"
            else
                echo "Non-existent network sysctl entry : $arg"
            fi
        done

	# The sysset refers to /sys/class/net.
        for arg in "${opt_sysset[@]}"; do
            local sysset value
            sysset="${arg%%=*}"
            sysset="${sysset//.//}"
            value="${arg##*=}"
            if [ -e "/sys/class/net/$sysset" ]; then
                echo "$value" > "/sys/class/net/$sysset"
            else
                echo "Non-existent network sysset entry : $arg"
            fi
        done

	arg=0
	while [ $arg -lt ${#opt_load[*]} ]; do
	    if [ "${opt_load[$arg]}" != "#" ]; then
		if ! sh -c "${opt_load[$arg]}"; then
		    echo "  ==> start $svcname : load ${opt_load[$arg]} failed. Trying anyway."
		fi
	    fi
	    arg=$[$arg+1]
	done
	arg=0
	while [ $arg -lt $route_idx ]; do
	    local dest gw
	    dest=${route_list[$arg]%%[ 	]*}
	    gw=${route_list[$arg]#*[ 	]}	# gw and potentially other ip args
	    if [ -n "${gw##connected*}" ]; then
		ip route add $dest via $gw
	    else
		ip route add $dest ${gw#connected}
	    fi
	    arg=$[$arg+1]
	done
        arg=0
        while [ $arg -lt $route6_idx ]; do
            local dest gw
            dest=${route6_list[$arg]%%[  ]*}
            gw=${route6_list[$arg]#*[    ]}      # gw and potentially other ip args
            if [ -n "${gw##connected*}" ]; then
                echo ip -6 route add $dest via $gw
            else
                echo ip -6 route add $dest ${gw#connected}
            fi
            arg=$[$arg+1]
        done
	echo "  ==> start $svcname : Done."
	return $?
    fi

    if [ "$opt_shutdown" = 1 ]; then
	return 0
    fi

    echo "# Starting $svcname${instname:+[$instname]} ..."
    # we only check running instances when an interface is defined
    do_status $svcname $instname > /dev/null 2>&1
    if [ $? = 0 -a "$instname" != "lo" -a $FORCE_START_STOP -eq 0 ] ; then
	echo "  ==> Service $svcname${instname:+[$instname]} already running.";
	[ $SVC_AUTO_START -eq 0 ] && echo "  ==> please use '--force' or 'restart' instead or check with 'status'."
	return 0
    fi

    # maybe we want to replace an interface (which may either exist or remain
    # unloaded yet)

    repl=${opt_replace:-$instname};
    arg=0
    while [ $arg -lt ${#opt_modprobe[*]} ]; do
	if [ "${opt_modprobe[$arg]}" != "#" ]; then
	    if ! modprobe ${opt_modprobe[$arg]}; then
		echo "  ==> start $svcname${instname:+[$instname]} : modprobe ${opt_modprobe[$arg]} failed. Trying anyway."
		# return 1
	    fi
	else
	    local err	# do not merge the assignment here, local sets $? to 0 !
	    err=`modprobe $repl 2>&1`
	    if [ $? -gt 0 ]; then
		if ! grep -q "^[ 	]*$instname:" /proc/net/dev >/dev/null 2>&1; then
		    echo "  ==> start $svcname[$instname] : modprobe $instname failed : $err. Trying anyway."
		    # return 1
		fi
	    fi
	fi
	arg=$[$arg+1]
    done

    arg=0
    while [ $arg -lt ${#opt_load[*]} ]; do
        if [ "${opt_load[$arg]}" != "#" ]; then
	    if ! sh -c "${opt_load[$arg]}"; then
	        echo "  ==> start $svcname : load ${opt_load[$arg]} failed. Trying anyway."
	    fi
        fi
        arg=$[$arg+1]
    done
    arg=0

    # configure the bridge
    if [ ${#opt_bridge[*]} -gt 0 ]; then
	brctl addbr $instname
	[ "${opt_bridge_stp}" == "1" ] && brctl stp $instname on
        [ "${opt_bridge_stp}" != "1" ] && brctl setfd $instname 0
	for arg in ${opt_bridge[*]}; do
		if ! ( do_status $svcname $arg || \
		       ip li set dev $arg up || \
		       do_start $svcname $arg ) >/dev/null 2>&1; then
		    echo "  ==> FAILED! need to start iface $arg before $instname"
		else
		    brctl addif $instname $arg >/dev/null 2>&1
		    ip addr flush dev $arg >/dev/null 2>&1
		fi
	done
    fi

    if [ -e "/sys/class" ] ; then
        if [ ${#opt_slave[*]} -gt 0 ]; then
            if [ "$opt_master_type" == "bonding" -o -z "$opt_master_type" ] ;then
                if [ ! -e "/sys/class/net/bonding_masters" ] ; then
                    echo -n "  ==> modprobe bonding: "
                    modprobe bonding
                    if [ ! -e "/sys/class/net/bonding_masters" ] ; then
                        echo "Failed!"
                    else
                        echo "Done."
                    fi
                    # Remove default created bond"
                    echo "-bond0" > /sys/class/net/bonding_masters
                fi
                echo -n "  ==> create bonding master $instname: "
                echo "+$instname" > /sys/class/net/bonding_masters
                if [ ! -e "/sys/class/net/$instname" ] ; then
                    echo "Failed!"
                else
                    echo "Done."
                fi
                # set bonding parameters
                arg=0
                while [ $arg -lt $bonding_idx ]; do
                    if [ -e "/sys/class/net/$instname/bonding/${bonding_param[$arg]}" ] ; then
                        echo "${bonding_value[$arg]}" > "/sys/class/net/$instname/bonding/${bonding_param[$arg]}"
                    else
                        echo "  ==> Bonding parameter ${bonding_param[$arg]} does not exist!"
                    fi
                    arg=$[$arg+1]
                done
            fi
        fi
    fi

    # Create the VLAN interface if it does not exist yet.
    if ! grep -qE "^[ 	]*($instname|$repl):" /proc/net/dev >/dev/null 2>&1; then
	# A dot in an interface name means physical_if.vlanid
	# We have to create the interface now.
	if [ -z "${repl//*.*/}" ]; then
	    arg="${repl%%.*}"
	    if ! do_status "$svcname" "$arg" && ! do_start "$svcname" "$arg" >/dev/null 2>&1; then
		echo "  ==> FAILED! could not start slave $arg before $instname"
	    fi
	    vconfig add "$arg" "${repl#*.}" >/dev/null
	    if [ $? -gt 0 ]; then
		echo "  ==> start $svcname${instname:+[$instname]} : Failed."
		return 1
	    fi
	fi
    fi

    [ ${#opt_bridge[*]} -gt 0 ] || ip link set "$repl" down >/dev/null 2>&1
    ip addr flush dev "$repl" >/dev/null 2>&1

    # Rename the interface if needed.
    if [ "$repl" != "$instname" ] && \
       ! grep -q "^[ 	]*$instname:" /proc/net/dev >/dev/null 2>&1 && \
	 grep -q "^[ 	]*$repl:" /proc/net/dev >/dev/null 2>&1; then
	# if the interface appears with the old name, rename it now
	ip li set "$repl" name "$instname"
    fi

    # We do this to bind IPv4 immediately to this interface.
    # It's problematic with the 'lo' device because bringing it up with IPv4
    # bound automatically adds the address 127.0.0.1/8.
    if [ ${#opt_sysctl[@]} -gt 0 ]; then
        ip addr add 0.0.0.0 dev $instname >/dev/null 2>&1
    fi

    for arg in "${opt_sysctl[@]}"; do
        local sysctl value
        sysctl="${arg%%=*}"
        sysctl="${sysctl//.//}"
        value="${arg##*=}"
        if [ -e "/proc/sys/net/ipv4/conf/$instname/$sysctl" ]; then
            echo "$value" > "/proc/sys/net/ipv4/conf/$instname/$sysctl"
        else
            echo "Non-existent network sysctl entry for $instname : $arg"
        fi
    done

    for arg in "${opt_sysset[@]}"; do
        local sysset value
        sysset="${arg%%=*}"
        sysset="${sysset//.//}"
        value="${arg##*=}"
        if [ -e "/sys/class/net/$instname/$sysset" ]; then
            echo "$value" > "/sys/class/net/$instname/$sysset"
        else
            echo "Non-existent network sysset entry for $instname : $arg"
        fi
    done

    if [ "$opt_lladdr" ]; then
	ip link set $instname address $opt_lladdr
    fi

    if [ "$opt_mtu" ]; then
	ip link set $instname mtu $opt_mtu
    fi

    if [ "$opt_multicast" != 1 ]; then
	ip link set $instname multicast off
    #else
	#ip link set $instname multicast on
    fi

    if [ "$opt_arp" != 1 ]; then
	ip link set $instname arp off
    fi

    if ! ip link set $instname up; then
	echo "  ==> start $svcname${instname:+[$instname]} : Failed."
	return 1
    elif [ "$instname" = "lo" ] ; then
       ip addr del dev $instname 127.0.0.1/8 >/dev/null 2>&1
    fi

    if [ "$opt_media" ]; then
	if [ -n "$opt_speed" -o -n "$opt_duplex" -o -n "$opt_auto" ]; then
	    echo " ==> Warning: option 'media' inhibits 'speed','duplex' and 'auto'."
	fi
	set_media $instname "$opt_media"
	echo "  ==> Link set to $opt_media for interface $instname"
    elif [ -n "$opt_speed" -o -n "$opt_duplex" -o -n "$opt_auto" ]; then
	set_media2 $instname "${opt_speed:--}" "${opt_duplex:--}" "${opt_auto:--}"
	echo "  ==> Link configuration changed for interface $instname"
    fi

    if [ ${#opt_slave[*]} -gt 0 ]; then
	for arg in ${opt_slave[*]}; do
	    if ! do_status $svcname $arg && ! do_start $svcname $arg >/dev/null 2>&1; then
		echo "  ==> FAILED! need to start slave $arg before $instname"
                ip link set $instname down
                if [ -e /sys/class/net/bonding_masters ]; then
                    echo "-$instname" > /sys/class/net/bonding_masters
                fi
                echo "  ==> start $svcname${instname:+[$instname]} : Failed."
                return 1
	    else
		ifenslave $instname $arg >/dev/null 2>&1
		ip addr flush dev $arg >/dev/null 2>&1
	    fi
	done
    fi

    if [ -e "/sys/class/net/$instname/bonding" ] ; then
        # re-set bonding parameters (some parameters like primary can not be set before slave attachement )
        arg=0
        while [ $arg -lt $bonding_idx ]; do
            if [ -e "/sys/class/net/$instname/bonding/${bonding_param[$arg]}" ] ; then
                echo "${bonding_value[$arg]}" > "/sys/class/net/$instname/bonding/${bonding_param[$arg]}"
            fi
	    arg=$[$arg+1]
        done
    fi

    arg=0
    while [ $arg -lt $addr_idx ]; do
	if [ "${addr_list[$arg]}" = "dhcp" ]; then
	    echo "  ==> Waiting for ip address with DHCP request ... "
	    # on some cards (eg: tg3), we need to wait a bit before
	    # using the link.
	    ethtool $instname 2>/dev/null | grep -qF 'Link detected: yes' || sleep 1
	    if [ "$opt_usedhcphostname" = 0 ]; then
	        dhcpcd -t ${opt_dhcptimeout:-10} $instname
	    else
	        dhcpcd -H -t ${opt_dhcptimeout:-10} $instname
	    fi
	    set -- $(ip addr show dev $instname | grep ' inet ')
	    if [ -n "$2" ]; then
		echo "      Device $instname has IP address $2"
	    else
		echo "      Device $instname has no IP address"
	    fi
	else
	    ip addr add dev $instname ${addr_list[$arg]}
	fi
	arg=$[$arg+1]
    done

    arg=0
    while [ $arg -lt $addr6_idx ]; do
        ip -6 addr add dev $instname ${addr6_list[$arg]}
        arg=$[$arg+1]
    done

    arg=0
    while [ $arg -lt $arp_idx ]; do
	local ip mac
	ip=${arp_list[$arg]%%[ 	]*}
	mac=${arp_list[$arg]#*[ 	]}

	# delete annoying pub entries if it exists. We don't use ip neigh here
	# because it cannot create anything if an incomplete entry exists.
	arp -i $instname -d $ip pub >/dev/null 2>&1

	if [ "$mac" = "pub" ]; then
	    arp -i $instname -Ds $ip $instname pub
	else
	    arp -i $instname -s $ip $mac
	fi
	arg=$[$arg+1]
    done

    arg=0
    while [ $arg -lt $route_idx ]; do
	local dest gw
	dest=${route_list[$arg]%%[ 	]*}
	gw=${route_list[$arg]#*[ 	]}	# gw and potentially other ip args
	if [ -n "${gw##connected*}" ]; then
	    ip route add $dest dev $instname via $gw
	else
	    ip route add $dest dev $instname ${gw#connected}
	fi
	arg=$[$arg+1]
    done
    arg=0
    while [ $arg -lt $route6_idx ]; do
        local dest gw
        dest=${route6_list[$arg]%%[      ]*}
        gw=${route6_list[$arg]#*[        ]}      # gw and potentially other ip args
        if [ -n "${gw##connected*}" ]; then
            ip -6 route add $dest dev $instname via $gw
        else
            ip -6 route add $dest dev $instname ${gw#connected}
        fi
        arg=$[$arg+1]
    done
    echo "  ==> start $svcname${instname:+[$instname]} : Done."
}

function do_status {
    local instname=$2
    if [ "$instname" ]; then
	if ip link show $instname | grep -q UP; then
	    echo "Interface $instname is up."
	    return 0
	else
	    echo "Interface $instname is down."
	    return 1
	fi
    #else
    #	 if ip route list | grep -q dev; then
    #	     echo "Network is up."
    #	     return 0
    #	 else
    #	     echo "Network is down."
    #	     return 1
    #	 fi
    fi
    REPLY=
    return 0
}


function do_stop {
    local svcname=$1
    local instname=$2
    local arg

    if [ -z "$instname" ]; then
	echo "# Stopping $svcname ..."

	arg=0
	while [ $arg -lt ${#opt_unload[*]} ]; do
	    if [ "${opt_unload[$arg]}" != "#" ]; then
		if ! sh -c "${opt_unload[$arg]}"; then
		    echo "  ==> stop $svcname : unload ${opt_unload[$arg]} failed. Trying anyway."
		fi
	    fi
	    arg=$[$arg+1]
	done

	arg=${#opt_modprobe[*]}
	while [ $arg -gt 0 ]; do
	    arg=$[$arg-1]
	    if [ "${opt_modprobe[$arg]}" != "#" ]; then
		modprobe -r ${opt_modprobe[$arg]} >/dev/null 2>&1
	    fi
	done

	arg=0
	while [ $arg -lt $route_idx ]; do
	    ip route del ${route_list[$arg]} >/dev/null 2>&1
	    arg=$[$arg+1]
	done
	return $?
    fi

    echo "# Stopping $svcname${instname:+[$instname]} ..."

    if ! do_status $svcname $instname > /dev/null 2>&1; then
	# vlan interfaces must disappear
	if [ -n "${instname//*.*/}" ] || ! ip link show $instname >/dev/null 2>&1; then
	    echo "  ==> stop $svcname${instname:+[$instname]} : already stopped."
	    return 0
        fi
    fi

    # we may have to kill dhcpcd
    arg=0
    while [ $arg -lt $addr_idx ]; do
	if [ "${addr_list[$arg]}" = "dhcp" ]; then
	    local proc
	    for proc in $(svc_pidof dhcpcd) ; do 
		if grep -qs $instname /proc/$proc/cmdline ; then kill $proc ; fi
	    done   
	fi
	arg=$[$arg+1]
    done

    ip link set $instname down >/dev/null 2>&1
    ip addr flush dev $instname >/dev/null 2>&1

    arg=0
    while [ $arg -lt ${#opt_unload[*]} ]; do
        if [ "${opt_unload[$arg]}" != "#" ]; then
	    if ! sh -c "${opt_unload[$arg]}"; then
	        echo "  ==> stop $svcname : unload ${opt_unload[$arg]} failed. Trying anyway."
	    fi
        fi
        arg=$[$arg+1]
    done

    # a dot in an interface name means physical_if.vlanid
    # We have to remove the interface now.
    [ -z "${instname//*.*/}" ] && vconfig rem $instname >/dev/null

    if [ ${#opt_bridge[*]} -gt 0 ]; then
	for arg in ${opt_bridge[*]}; do
	    do_status $svcname $arg && ip li set dev $arg down >/dev/null 2>&1
            ip addr flush dev $arg >/dev/null 2>&1
	    brctl delif $instname $arg >/dev/null 2>&1
        done
	brctl delbr $instname
    fi

    arg=${#opt_modprobe[*]}
    while [ $arg -gt 0 ]; do
	arg=$[$arg-1]
	if [ "${opt_modprobe[$arg]}" != "#" ]; then
	    modprobe -r ${opt_modprobe[$arg]} >/dev/null 2>&1
	else
	    modprobe -r $instname >/dev/null 2>&1
	fi
    done

    # delete bond
    if [ -e "/sys/class/net/$instname/bonding" ] ; then
	echo "-$instname" > /sys/class/net/bonding_masters
    fi
    echo "  ==> stop $svcname${instname:+[$instname]} : Done."
}


# only flushes addresses, routes routes and sets if down. doesn't remove any module
function do_flush {
    local svcname=$1
    local instname=$2
    local arg

    if [ -z "$instname" ]; then
	echo "# Flushing $svcname ..."

	arg=0
	while [ $arg -lt $route_idx ]; do
	    ip route del ${route_list[$arg]} >/dev/null 2>&1
	    arg=$[$arg+1]
	done
	return $?
    fi

    echo "# Flushing $svcname${instname:+[$instname]} ..."

    if ! do_status $svcname $instname > /dev/null 2>&1; then
	# vlan interfaces must disappear
	if [ -n "${instname//*.*/}" ] || ! ip link show $instname >/dev/null 2>&1; then
	    echo "  ==> flush $svcname${instname:+[$instname]} : already flushed."
	    return 0
        fi
    fi

    # we may have to kill dhcpcd
    arg=0
    while [ $arg -lt $addr_idx ]; do
	if [ "${addr_list[$arg]}" = "dhcp" ]; then
	    local proc
	    for proc in $(svc_pidof dhcpcd) ; do 
		if grep -qs $instname /proc/$proc/cmdline ; then kill $proc ; fi
	    done   
	fi
	arg=$[$arg+1]
    done

    ip link set $instname down >/dev/null 2>&1
    ip addr flush dev $instname >/dev/null 2>&1

    # a dot in an interface name means physical_if.vlanid
    # We have to remove the interface now.
    [ -z "${instname//*.*/}" ] && vconfig rem $instname >/dev/null

    echo "  ==> flush $svcname${instname:+[$instname]} : Done."
}

#### these are the old versions. The slave mechanism should be checked.

_start_if() {
  local eth=$1
  local temp=`eval echo \\$int_${eth}_modprobe`
  ip link show $eth >/dev/null 2>&1
  if [ "$temp" -a $? -ne 0 ] ; then
    if [ "$temp" = modprobe ] ; then
      modprobe $eth
    else
      modprobe $temp
    fi
  fi

  ip link show $eth | grep -q UP 
  if [ $? = 0 ] ; then 
    echo "Interface $eth already configured"
    continue
  fi

  if [ "`eval echo \\$int_${eth}_slave`" ]; then
    # the slaves should be up before continuing
    for int in `eval echo \\$int_${eth}_slave`; do
      start_if $int
    done
  fi

  if [ "`eval echo \\$int_${eth}_media`" ]; then
    media=`eval echo \\$int_${eth}_media`
    case "$media" in
      auto) /sbin/mii-diag -r $eth >/dev/null ;;
      full|fdx|100full|100fdx) /sbin/mii-diag -F 100baseTx-FD $eth >/dev/null ;;
      half|hdx|100half|100hdx) /sbin/mii-diag -F 100baseTx-HD $eth >/dev/null ;;
      *) /sbin/mii-diag -F $media $eth >/dev/null ;;
    esac
    echo "Link set to $media for interface $eth"
  fi

  ip link set $eth up
  ip addr flush dev $eth >/dev/null 2>&1
  if [ "`eval echo \\$ip_dhcp_$eth`" = enable ] ; then
    echo "Waiting for ip address with DHCP request ... "
    dhcpcd -t 10 $eth
  elif [ "`eval echo \\$ip_address_$eth`" ]; then
    ip_address=`eval echo \\$ip_address_$eth`
    ip_address_sec=`eval echo \\$ip_address_sec_$eth`
    echo "Setting ip address $ip_address to interface $eth"
    ip addr add $ip_address dev $eth
    for addr in $ip_address_sec ; do
      echo "Setting secondary ip address $addr to interface $eth"
      ip addr add $addr dev $eth
    done
  fi

  if [ "`eval echo \\$int_${eth}_slave`" ]; then
    ifenslave $eth `eval echo \\$int_${eth}_slave`
    # we prefer no ip address on the slaves
    for int in `eval echo \\$int_${eth}_slave`; do
      ip addr flush dev $int
    done
  fi

  addr=`ip addr show $eth  | grep "inet " | sed 's/^.*inet \([^ ]\+\) .*$/\1/'`
  if [ ! -z "$addr" ]; then
     if [ ! -z "$display_addr_in_issue" ]; then
        echo "  -> $eth has address $addr"
        echo "$eth has address $addr" >> /etc/issue
     fi
  else
     if [ ! -z "$display_addr_in_issue" ]; then
        echo "  -> $eth has no address"
        echo "$eth has no address" >> /etc/issue
     fi
  fi
}

_do_start()
{
 # set hostname
 if [ "$hostname" ] ; then
  echo "Setting hostname '$hostname'"
  hostname $hostname
  domainname `echo $hostname | cut -f2- -d.`
 fi 

 # set ip address for each interface
 for eth in `set|grep -a '^int_[a-zA-Z0-9:-_]*=enable$'|\
            sed -e 's/.*_\(.*\)=.*/\1/'` ; do
 	start_if $eth
 done

 # set ip route
 for route in `echo $ip_route` ; do
  way=`echo $route | cut -f1 -d:`
  if [ -z "$way" ] ; then way=default ; fi
  gateway=`echo $route | cut -f2 -d":"`
  echo "Setting route $way via $gateway"
  /sbin/ip route add $way via $gateway
 done
}

_do_stop()
{
 for eth in `set|grep -a '^int_[a-zA-Z0-9:-_]*=enable$'|\
            sed -e 's/.*_\(.*\)=.*/\1/'` ; do
  echo "Shutting down $eth"
  if [ "`eval echo \\$ip_dhcp_$eth`" = enable ] ; then
    for proc in `pidof dhcpcd` ; do 
      if grep -qs $eth /proc/$proc/cmdline ; then kill $proc ; fi
    done   
  fi
  ip link set $eth down
  ip addr flush dev $eth >/dev/null 2>&1
  if [ ! -z `eval echo \\$int_"$eth"_slave` ]; then
    for slave in `eval echo \\$int_"$eth"_slave`; do
	ip link set $slave down arp on
	ip addr flush dev $slave >/dev/null 2>&1
    done
  fi
  if [ ! -z "$display_addr_in_issue" ]; then
     grep -v "$eth " /etc/issue > /etc/issue- && mv /etc/issue- /etc/issue
  fi
 done
}

_do_status() 
{
    echo "'ip addr show' give:"
    ip addr show
    echo "'ip route show' give:"
    ip route show
} 

load_config


